/*
 * dsp_calculations.h
 *
 *  Created on: 09.12.2016
 *      Author: Kwarc
 */

#ifndef __DSP_CALCULATIONS_H_
#define __DSP_CALCULATIONS_H_

#include <stdbool.h>
#include <math.h>
#include "stm32f4xx_hal.h"
#include "arm_math.h"
#include "adc.h"
#include "tim.h"

/* ----------------------------------------------------------------------------
** Macro Defines
** ------------------------------------------------------------------------- */
#define BASE_FREQUENCY			(50UL)
#define ADC_SAMPLING_F			(81920UL)//
#define OVERSAMPLING			(16UL)//
#define OVERSAMPLING_BITS		(2UL)//
#define DECIMATION				(2UL)//

#define ADC_BUFFER_LENGTH		((20UL*ADC_SAMPLING_F)/BASE_FREQUENCY)
#define ADC_HALFBUFFER_LENGTH	(ADC_BUFFER_LENGTH/2)
#define ADC_RESOLUTION			(16384UL)//
#define DSP_SAMPLING_F			(ADC_SAMPLING_F/(OVERSAMPLING*DECIMATION))
#define FFT_LENGTH				(ADC_HALFBUFFER_LENGTH/(OVERSAMPLING*DECIMATION))
#define RFFT_50HZ_BIN			((BASE_FREQUENCY*FFT_LENGTH)/(DSP_SAMPLING_F))
#define CFFT_50HZ_BIN_R			(2*RFFT_50HZ_BIN)
#define CFFT_50HZ_BIN_I			(2*RFFT_50HZ_BIN + 1)
#define FFT_RES					(DSP_SAMPLING_F/FFT_LENGTH)
#define BLOCK_SIZE          	32
#define NUM_TAPS            	29

#define SQRT2 (1.414213562f)

#define GET_ADC2_RESULT(x)	((uint16_t) ((uint32_t)(x) >> 16))
#define GET_ADC1_RESULT(x)	((uint16_t) ((uint32_t)(x) & 0x0000FFFFUL))
#define GET_HARMONIC(k)		(RFFT_50HZ_BIN*(uint8_t)(k))
#define GET_HARMONIC_R(k)	(CFFT_50HZ_BIN_R*(uint8_t)(k))
#define GET_HARMONIC_I(k)	(CFFT_50HZ_BIN_I*(uint8_t)(k))
#define RMS_VOLTAGE_RANGE	((float32_t)(260.0f * 1.024f))				// [U RMS] * calibr. coeff.
#define RMS_CURRENT_RANGE	((float32_t)(20.0f * 1.1099479f))			// [I RMS] * calibr. coeff.
#define PEAK_VOLTAGE_RANGE	((float32_t)(2.0f*RMS_VOLTAGE_RANGE*SQRT2))	// [U PEAK]
#define PEAK_CURRENT_RANGE	((float32_t)(2.0f*RMS_CURRENT_RANGE*SQRT2))	// [I PEAK]

uint32_t* ready_buffer;
_Bool DSP_apply_window;
enum DSP_BufferToDisplay {voltage, current, voltageFFT, currentFFT};
typedef enum {ind_load = 1, cap_load, ind_generator, cap_generator} LoadCharacter_t;

/* --------------------------------------------------------------------------
** FIR Coefficients buffer generated using fir1() MATLAB function.
** -------------------------------------------------------------------------- */

static const float32_t firCoeffs32[NUM_TAPS] = {	// fir1(28, 2000/2560) for fs = 5120Hz
		0.0003545240f,0.0010555276f,-0.0030740696f,0.0049896991f,-0.0044734388f,-0.0011790011f,
		0.0123015638f,-0.0244144730f,0.0283087897f,-0.0136549787f,-0.0251553786f,0.0841058969f,-0.1488480303f,
		0.1994199547f,0.7805268281f,0.1994199547f,-0.1488480303f,0.0841058969f,-0.0251553786f,-0.0136549787f,
		0.0283087897f,-0.0244144730f,0.0123015638f,-0.0011790011f,-0.0044734388f,0.0049896991f,-0.0030740696f,
		0.0010555276f,0.0003545240f };

/* --------------------------------------------------------------------
** Hanning window generated using hann(N, 'periodic') MATLAB function.
** -------------------------------------------------------------------- */
static const float32_t hanning[FFT_LENGTH] = {
	0.0000000000f,0.0000376491f,0.0001505907f,0.0003388077f,0.0006022719f,0.0009409435f,
	0.0013547717f,0.0018436939f,0.0024076367f,0.0030465150f,0.0037602327f,0.0045486823f,0.0054117450f,
	0.0063492909f,0.0073611788f,0.0084472563f,0.0096073598f,0.0108413146f,0.0121489350f,0.0135300239f,
	0.0149843734f,0.0165117645f,0.0181119671f,0.0197847403f,0.0215298321f,0.0233469798f,0.0252359097f,
	0.0271963373f,0.0292279674f,0.0313304940f,0.0335036006f,0.0357469598f,0.0380602337f,0.0404430742f,
	0.0428951221f,0.0454160085f,0.0480053534f,0.0506627672f,0.0533878494f,0.0561801898f,0.0590393678f,
	0.0619649529f,0.0649565044f,0.0680135719f,0.0711356950f,0.0743224034f,0.0775732174f,0.0808876472f,
	0.0842651938f,0.0877053486f,0.0912075934f,0.0947714009f,0.0983962343f,0.1020815477f,0.1058267862f,
	0.1096313857f,0.1134947733f,0.1174163672f,0.1213955767f,0.1254318027f,0.1295244373f,0.1336728642f,
	0.1378764585f,0.1421345874f,0.1464466094f,0.1508118753f,0.1552297276f,0.1596995011f,0.1642205226f,
	0.1687921112f,0.1734135785f,0.1780842286f,0.1828033579f,0.1875702559f,0.1923842047f,0.1972444793f,
	0.2021503478f,0.2071010713f,0.2120959043f,0.2171340946f,0.2222148835f,0.2273375058f,0.2325011901f,
	0.2377051587f,0.2429486279f,0.2482308081f,0.2535509039f,0.2589081140f,0.2643016316f,0.2697306445f,
	0.2751943352f,0.2806918807f,0.2862224533f,0.2917852200f,0.2973793430f,0.3030039800f,0.3086582838f,
	0.3143414030f,0.3200524817f,0.3257906599f,0.3315550733f,0.3373448539f,0.3431591298f,0.3489970253f,
	0.3548576614f,0.3607401553f,0.3666436213f,0.3725671702f,0.3785099100f,0.3844709459f,0.3904493799f,
	0.3964443119f,0.4024548390f,0.4084800560f,0.4145190556f,0.4205709283f,0.4266347628f,0.4327096457f,
	0.4387946624f,0.4448888964f,0.4509914298f,0.4571013438f,0.4632177182f,0.4693396318f,0.4754661628f,
	0.4815963885f,0.4877293857f,0.4938642309f,0.5000000000f,0.5061357691f,0.5122706143f,0.5184036115f,
	0.5245338372f,0.5306603682f,0.5367822818f,0.5428986562f,0.5490085702f,0.5551111036f,0.5612053376f,
	0.5672903543f,0.5733652372f,0.5794290717f,0.5854809444f,0.5915199440f,0.5975451610f,0.6035556881f,
	0.6095506201f,0.6155290541f,0.6214900900f,0.6274328298f,0.6333563787f,0.6392598447f,0.6451423386f,
	0.6510029747f,0.6568408702f,0.6626551461f,0.6684449267f,0.6742093401f,0.6799475183f,0.6856585970f,
	0.6913417162f,0.6969960200f,0.7026206570f,0.7082147800f,0.7137775467f,0.7193081193f,0.7248056648f,
	0.7302693555f,0.7356983684f,0.7410918860f,0.7464490961f,0.7517691919f,0.7570513721f,0.7622948413f,
	0.7674988099f,0.7726624942f,0.7777851165f,0.7828659054f,0.7879040957f,0.7928989287f,0.7978496522f,
	0.8027555207f,0.8076157953f,0.8124297441f,0.8171966421f,0.8219157714f,0.8265864215f,0.8312078888f,
	0.8357794774f,0.8403004989f,0.8447702724f,0.8491881247f,0.8535533906f,0.8578654126f,0.8621235415f,
	0.8663271358f,0.8704755627f,0.8745681973f,0.8786044233f,0.8825836328f,0.8865052267f,0.8903686143f,
	0.8941732138f,0.8979184523f,0.9016037657f,0.9052285991f,0.9087924066f,0.9122946514f,0.9157348062f,
	0.9191123528f,0.9224267826f,0.9256775966f,0.9288643050f,0.9319864281f,0.9350434956f,0.9380350471f,
	0.9409606322f,0.9438198102f,0.9466121506f,0.9493372328f,0.9519946466f,0.9545839915f,0.9571048779f,
	0.9595569258f,0.9619397663f,0.9642530402f,0.9664963994f,0.9686695060f,0.9707720326f,0.9728036627f,
	0.9747640903f,0.9766530202f,0.9784701679f,0.9802152597f,0.9818880329f,0.9834882355f,0.9850156266f,
	0.9864699761f,0.9878510650f,0.9891586854f,0.9903926402f,0.9915527437f,0.9926388212f,0.9936507091f,
	0.9945882550f,0.9954513177f,0.9962397673f,0.9969534850f,0.9975923633f,0.9981563061f,0.9986452283f,
	0.9990590565f,0.9993977281f,0.9996611923f,0.9998494093f,0.9999623509f,1.0000000000f,0.9999623509f,
	0.9998494093f,0.9996611923f,0.9993977281f,0.9990590565f,0.9986452283f,0.9981563061f,0.9975923633f,
	0.9969534850f,0.9962397673f,0.9954513177f,0.9945882550f,0.9936507091f,0.9926388212f,0.9915527437f,
	0.9903926402f,0.9891586854f,0.9878510650f,0.9864699761f,0.9850156266f,0.9834882355f,0.9818880329f,
	0.9802152597f,0.9784701679f,0.9766530202f,0.9747640903f,0.9728036627f,0.9707720326f,0.9686695060f,
	0.9664963994f,0.9642530402f,0.9619397663f,0.9595569258f,0.9571048779f,0.9545839915f,0.9519946466f,
	0.9493372328f,0.9466121506f,0.9438198102f,0.9409606322f,0.9380350471f,0.9350434956f,0.9319864281f,
	0.9288643050f,0.9256775966f,0.9224267826f,0.9191123528f,0.9157348062f,0.9122946514f,0.9087924066f,
	0.9052285991f,0.9016037657f,0.8979184523f,0.8941732138f,0.8903686143f,0.8865052267f,0.8825836328f,
	0.8786044233f,0.8745681973f,0.8704755627f,0.8663271358f,0.8621235415f,0.8578654126f,0.8535533906f,
	0.8491881247f,0.8447702724f,0.8403004989f,0.8357794774f,0.8312078888f,0.8265864215f,0.8219157714f,
	0.8171966421f,0.8124297441f,0.8076157953f,0.8027555207f,0.7978496522f,0.7928989287f,0.7879040957f,
	0.7828659054f,0.7777851165f,0.7726624942f,0.7674988099f,0.7622948413f,0.7570513721f,0.7517691919f,
	0.7464490961f,0.7410918860f,0.7356983684f,0.7302693555f,0.7248056648f,0.7193081193f,0.7137775467f,
	0.7082147800f,0.7026206570f,0.6969960200f,0.6913417162f,0.6856585970f,0.6799475183f,0.6742093401f,
	0.6684449267f,0.6626551461f,0.6568408702f,0.6510029747f,0.6451423386f,0.6392598447f,0.6333563787f,
	0.6274328298f,0.6214900900f,0.6155290541f,0.6095506201f,0.6035556881f,0.5975451610f,0.5915199440f,
	0.5854809444f,0.5794290717f,0.5733652372f,0.5672903543f,0.5612053376f,0.5551111036f,0.5490085702f,
	0.5428986562f,0.5367822818f,0.5306603682f,0.5245338372f,0.5184036115f,0.5122706143f,0.5061357691f,
	0.5000000000f,0.4938642309f,0.4877293857f,0.4815963885f,0.4754661628f,0.4693396318f,0.4632177182f,
	0.4571013438f,0.4509914298f,0.4448888964f,0.4387946624f,0.4327096457f,0.4266347628f,0.4205709283f,
	0.4145190556f,0.4084800560f,0.4024548390f,0.3964443119f,0.3904493799f,0.3844709459f,0.3785099100f,
	0.3725671702f,0.3666436213f,0.3607401553f,0.3548576614f,0.3489970253f,0.3431591298f,0.3373448539f,
	0.3315550733f,0.3257906599f,0.3200524817f,0.3143414030f,0.3086582838f,0.3030039800f,0.2973793430f,
	0.2917852200f,0.2862224533f,0.2806918807f,0.2751943352f,0.2697306445f,0.2643016316f,0.2589081140f,
	0.2535509039f,0.2482308081f,0.2429486279f,0.2377051587f,0.2325011901f,0.2273375058f,0.2222148835f,
	0.2171340946f,0.2120959043f,0.2071010713f,0.2021503478f,0.1972444793f,0.1923842047f,0.1875702559f,
	0.1828033579f,0.1780842286f,0.1734135785f,0.1687921112f,0.1642205226f,0.1596995011f,0.1552297276f,
	0.1508118753f,0.1464466094f,0.1421345874f,0.1378764585f,0.1336728642f,0.1295244373f,0.1254318027f,
	0.1213955767f,0.1174163672f,0.1134947733f,0.1096313857f,0.1058267862f,0.1020815477f,0.0983962343f,
	0.0947714009f,0.0912075934f,0.0877053486f,0.0842651938f,0.0808876472f,0.0775732174f,0.0743224034f,
	0.0711356950f,0.0680135719f,0.0649565044f,0.0619649529f,0.0590393678f,0.0561801898f,0.0533878494f,
	0.0506627672f,0.0480053534f,0.0454160085f,0.0428951221f,0.0404430742f,0.0380602337f,0.0357469598f,
	0.0335036006f,0.0313304940f,0.0292279674f,0.0271963373f,0.0252359097f,0.0233469798f,0.0215298321f,
	0.0197847403f,0.0181119671f,0.0165117645f,0.0149843734f,0.0135300239f,0.0121489350f,0.0108413146f,
	0.0096073598f,0.0084472563f,0.0073611788f,0.0063492909f,0.0054117450f,0.0045486823f,0.0037602327f,
	0.0030465150f,0.0024076367f,0.0018436939f,0.0013547717f,0.0009409435f,0.0006022719f,0.0003388077f,
	0.0001505907f,0.0000376491f };


struct DSP_t
{
	float32_t mean;
	float32_t GRAPH_buffer[FFT_LENGTH];
	float32_t DSP_buffer[FFT_LENGTH];
	float32_t FFT_out_cmplx[FFT_LENGTH];
	float32_t FFT_out_real[FFT_LENGTH/2];
	float32_t FIR_state[BLOCK_SIZE + NUM_TAPS - 1];

	arm_fir_instance_f32 hFIR;
	arm_rfft_fast_instance_f32 hFFT;
};

struct parameters_t
{
	float32_t frequency;
	float32_t RMS_voltage,RMS_current;
	float32_t load_impedance[2];		// complex number
	float32_t grid_impedance;
	float32_t THD_voltage,THD_current;
	float32_t S,P,Q;
	float32_t PF, DPF;
	LoadCharacter_t load_type;
	_Bool data_averaged;
};

struct parameters_t grid;
struct DSP_t U,I;

void DSP_Init(void);
_Bool DSP_AutoselectBuffers(void);
float32_t* DSP_GetBufferPointer(enum DSP_BufferToDisplay type);
void DSP_FIRFilter(void);
void DSP_CalcRMS(void);
void DSP_CalcFrequency(void);
void DSP_ADCPLL(void);
void DSP_CalcFFT(void);
void DSP_CalcTHD(void);
void DSP_CalcLoadImpedance(void);
void DSP_GetLoadCharacter(void);
void DSP_CalcDPF(void);
void DSP_CalcPower(void);
void DSP_CalcPF(void);
void DSP_CalcHarmonicImpedance(void);
void DSP_AverageValues(uint8_t avg_number);





#endif /* __DSP_CALCULATIONS_H_ */
